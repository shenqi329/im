// Code generated by protoc-gen-go.
// source: forwardToAccess.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	forwardToAccess.proto
	login.proto

It has these top-level messages:
	ForwardTLPRequest
	ForwardTLPResponse
	IsLoginRequest
	IsLoginResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ForwardTLPRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`
	ProtoBuf []byte `protobuf:"bytes,4,opt,name=ProtoBuf,proto3" json:"ProtoBuf,omitempty"`
}

func (m *ForwardTLPRequest) Reset()                    { *m = ForwardTLPRequest{} }
func (m *ForwardTLPRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardTLPRequest) ProtoMessage()               {}
func (*ForwardTLPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ForwardTLPRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ForwardTLPRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ForwardTLPRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ForwardTLPRequest) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

type ForwardTLPResponse struct {
	Code string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
}

func (m *ForwardTLPResponse) Reset()                    { *m = ForwardTLPResponse{} }
func (m *ForwardTLPResponse) String() string            { return proto.CompactTextString(m) }
func (*ForwardTLPResponse) ProtoMessage()               {}
func (*ForwardTLPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ForwardTLPResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ForwardTLPResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*ForwardTLPRequest)(nil), "pb.ForwardTLPRequest")
	proto.RegisterType((*ForwardTLPResponse)(nil), "pb.ForwardTLPResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ForwardToAccess service

type ForwardToAccessClient interface {
	// Sends a greeting
	ForwardTLP(ctx context.Context, in *ForwardTLPRequest, opts ...grpc.CallOption) (*ForwardTLPResponse, error)
}

type forwardToAccessClient struct {
	cc *grpc.ClientConn
}

func NewForwardToAccessClient(cc *grpc.ClientConn) ForwardToAccessClient {
	return &forwardToAccessClient{cc}
}

func (c *forwardToAccessClient) ForwardTLP(ctx context.Context, in *ForwardTLPRequest, opts ...grpc.CallOption) (*ForwardTLPResponse, error) {
	out := new(ForwardTLPResponse)
	err := grpc.Invoke(ctx, "/pb.ForwardToAccess/ForwardTLP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ForwardToAccess service

type ForwardToAccessServer interface {
	// Sends a greeting
	ForwardTLP(context.Context, *ForwardTLPRequest) (*ForwardTLPResponse, error)
}

func RegisterForwardToAccessServer(s *grpc.Server, srv ForwardToAccessServer) {
	s.RegisterService(&_ForwardToAccess_serviceDesc, srv)
}

func _ForwardToAccess_ForwardTLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardTLPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardToAccessServer).ForwardTLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForwardToAccess/ForwardTLP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardToAccessServer).ForwardTLP(ctx, req.(*ForwardTLPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForwardToAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ForwardToAccess",
	HandlerType: (*ForwardToAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardTLP",
			Handler:    _ForwardToAccess_ForwardTLP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forwardToAccess.proto",
}

func init() { proto.RegisterFile("forwardToAccess.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xcb, 0x2f, 0x2a,
	0x4f, 0x2c, 0x4a, 0x09, 0xc9, 0x77, 0x4c, 0x4e, 0x4e, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x2a, 0xe4, 0x12, 0x74, 0x83, 0x4a, 0xfa, 0x04, 0x04, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71, 0xb1, 0x85, 0x16, 0xa7, 0x16, 0x79, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x42, 0x22, 0x5c, 0xac, 0x21, 0xf9, 0xd9, 0xa9,
	0x79, 0x12, 0x4c, 0x60, 0x61, 0x08, 0x47, 0x48, 0x88, 0x8b, 0x25, 0xa4, 0xb2, 0x20, 0x55, 0x82,
	0x59, 0x81, 0x51, 0x83, 0x35, 0x08, 0xcc, 0x16, 0x92, 0xe2, 0xe2, 0x08, 0x00, 0xd9, 0xe1, 0x54,
	0x9a, 0x26, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe7, 0x2b, 0xd9, 0x70, 0x09, 0x21, 0x5b,
	0x59, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x0a, 0x32, 0xc5, 0x39, 0x3f, 0x25, 0x15, 0x6a, 0x23, 0x98,
	0x0d, 0x12, 0x73, 0x49, 0x2d, 0x4e, 0x86, 0x5a, 0x07, 0x66, 0x1b, 0x05, 0x70, 0xf1, 0xbb, 0xa1,
	0xfa, 0x46, 0xc8, 0x96, 0x8b, 0x0b, 0x61, 0xa0, 0x90, 0xa8, 0x5e, 0x41, 0x92, 0x1e, 0x86, 0x9f,
	0xa4, 0xc4, 0xd0, 0x85, 0x21, 0xf6, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0x43, 0xc3, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x53, 0xdd, 0x52, 0xe3, 0x26, 0x01, 0x00, 0x00,
}
