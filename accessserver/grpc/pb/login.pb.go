// Code generated by protoc-gen-go.
// source: login.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IsLoginRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
}

func (m *IsLoginRequest) Reset()                    { *m = IsLoginRequest{} }
func (m *IsLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*IsLoginRequest) ProtoMessage()               {}
func (*IsLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *IsLoginRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type IsLoginResponse struct {
	Code string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
}

func (m *IsLoginResponse) Reset()                    { *m = IsLoginResponse{} }
func (m *IsLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*IsLoginResponse) ProtoMessage()               {}
func (*IsLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *IsLoginResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *IsLoginResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*IsLoginRequest)(nil), "pb.IsLoginRequest")
	proto.RegisterType((*IsLoginResponse)(nil), "pb.IsLoginResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Login service

type LoginClient interface {
	// Sends a greeting
	IsLogin(ctx context.Context, in *IsLoginRequest, opts ...grpc.CallOption) (*IsLoginResponse, error)
}

type loginClient struct {
	cc *grpc.ClientConn
}

func NewLoginClient(cc *grpc.ClientConn) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) IsLogin(ctx context.Context, in *IsLoginRequest, opts ...grpc.CallOption) (*IsLoginResponse, error) {
	out := new(IsLoginResponse)
	err := grpc.Invoke(ctx, "/pb.Login/IsLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginServer interface {
	// Sends a greeting
	IsLogin(context.Context, *IsLoginRequest) (*IsLoginResponse, error)
}

func RegisterLoginServer(s *grpc.Server, srv LoginServer) {
	s.RegisterService(&_Login_serviceDesc, srv)
}

func _Login_IsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).IsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Login/IsLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).IsLogin(ctx, req.(*IsLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Login_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLogin",
			Handler:    _Login_IsLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}

func init() { proto.RegisterFile("login.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xc9, 0x4f, 0xcf,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe0, 0xe2, 0xf3,
	0x2c, 0xf6, 0x01, 0x09, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71, 0xb1, 0x85,
	0x16, 0xa7, 0x16, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x4a, 0x96,
	0x5c, 0xfc, 0x70, 0x95, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0xce, 0xf9,
	0x29, 0xa9, 0x50, 0x85, 0x60, 0x36, 0x48, 0xcc, 0x25, 0xb5, 0x38, 0x59, 0x82, 0x09, 0x22, 0x06,
	0x62, 0x1b, 0xd9, 0x72, 0xb1, 0x82, 0x35, 0x0a, 0x99, 0x70, 0xb1, 0x43, 0xcd, 0x10, 0x12, 0xd2,
	0x2b, 0x48, 0xd2, 0x43, 0xb5, 0x5a, 0x4a, 0x18, 0x45, 0x0c, 0x62, 0x89, 0x12, 0x43, 0x12, 0x1b,
	0xd8, 0xb9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xbd, 0xe6, 0xec, 0xbd, 0x00, 0x00,
	0x00,
}
