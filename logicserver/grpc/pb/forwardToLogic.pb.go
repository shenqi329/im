// Code generated by protoc-gen-go.
// source: forwardToLogic.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	forwardToLogic.proto
	offline.proto
	request.proto
	response.proto
	rpcInfo.proto
	session.proto

It has these top-level messages:
	ForwardTLPRequest
	ForwardTLPResponse
	DeviceOfflineRequest
	DeviceOfflineResponse
	Request
	Response
	RpcInfo
	CreateSessionRequest
	CreateSessionResponse
	DeleteSessionUsersRequest
	AddSessionUsersRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ForwardTLPRequest struct {
	RpcInfo     *RpcInfo `protobuf:"bytes,1,opt,name=RpcInfo" json:"RpcInfo,omitempty"`
	MessageType uint32   `protobuf:"varint,11,opt,name=messageType" json:"messageType,omitempty"`
	ProtoBuf    []byte   `protobuf:"bytes,12,opt,name=protoBuf,proto3" json:"protoBuf,omitempty"`
}

func (m *ForwardTLPRequest) Reset()                    { *m = ForwardTLPRequest{} }
func (m *ForwardTLPRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardTLPRequest) ProtoMessage()               {}
func (*ForwardTLPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ForwardTLPRequest) GetRpcInfo() *RpcInfo {
	if m != nil {
		return m.RpcInfo
	}
	return nil
}

func (m *ForwardTLPRequest) GetMessageType() uint32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *ForwardTLPRequest) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

type ForwardTLPResponse struct {
	Code        string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Desc        string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	ConnId      uint64 `protobuf:"varint,3,opt,name=connId" json:"connId,omitempty"`
	MessageType uint32 `protobuf:"varint,11,opt,name=messageType" json:"messageType,omitempty"`
	ProtoBuf    []byte `protobuf:"bytes,12,opt,name=protoBuf,proto3" json:"protoBuf,omitempty"`
}

func (m *ForwardTLPResponse) Reset()                    { *m = ForwardTLPResponse{} }
func (m *ForwardTLPResponse) String() string            { return proto.CompactTextString(m) }
func (*ForwardTLPResponse) ProtoMessage()               {}
func (*ForwardTLPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ForwardTLPResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ForwardTLPResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ForwardTLPResponse) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *ForwardTLPResponse) GetMessageType() uint32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *ForwardTLPResponse) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

func init() {
	proto.RegisterType((*ForwardTLPRequest)(nil), "pb.ForwardTLPRequest")
	proto.RegisterType((*ForwardTLPResponse)(nil), "pb.ForwardTLPResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ForwardToLogic service

type ForwardToLogicClient interface {
	// Sends a greeting
	ForwardTLP(ctx context.Context, in *ForwardTLPRequest, opts ...grpc.CallOption) (*ForwardTLPResponse, error)
}

type forwardToLogicClient struct {
	cc *grpc.ClientConn
}

func NewForwardToLogicClient(cc *grpc.ClientConn) ForwardToLogicClient {
	return &forwardToLogicClient{cc}
}

func (c *forwardToLogicClient) ForwardTLP(ctx context.Context, in *ForwardTLPRequest, opts ...grpc.CallOption) (*ForwardTLPResponse, error) {
	out := new(ForwardTLPResponse)
	err := grpc.Invoke(ctx, "/pb.ForwardToLogic/ForwardTLP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ForwardToLogic service

type ForwardToLogicServer interface {
	// Sends a greeting
	ForwardTLP(context.Context, *ForwardTLPRequest) (*ForwardTLPResponse, error)
}

func RegisterForwardToLogicServer(s *grpc.Server, srv ForwardToLogicServer) {
	s.RegisterService(&_ForwardToLogic_serviceDesc, srv)
}

func _ForwardToLogic_ForwardTLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardTLPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardToLogicServer).ForwardTLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForwardToLogic/ForwardTLP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardToLogicServer).ForwardTLP(ctx, req.(*ForwardTLPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForwardToLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ForwardToLogic",
	HandlerType: (*ForwardToLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardTLP",
			Handler:    _ForwardToLogic_ForwardTLP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forwardToLogic.proto",
}

func init() { proto.RegisterFile("forwardToLogic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xcb, 0x2f, 0x2a,
	0x4f, 0x2c, 0x4a, 0x09, 0xc9, 0xf7, 0xc9, 0x4f, 0xcf, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x2d, 0x2a, 0x48, 0xf6, 0xcc, 0x4b, 0xcb, 0x87, 0x08, 0x29,
	0x55, 0x70, 0x09, 0xba, 0x41, 0x95, 0xfa, 0x04, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0xa9, 0x72, 0xb1, 0x07, 0x41, 0x54, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x71, 0xeb, 0x15,
	0x24, 0xe9, 0x41, 0x85, 0x82, 0x60, 0x72, 0x42, 0x0a, 0x5c, 0xdc, 0xb9, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0x21, 0x95, 0x05, 0xa9, 0x12, 0xdc, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0xc8, 0x42, 0x42,
	0x52, 0x5c, 0x1c, 0x60, 0x6b, 0x9c, 0x4a, 0xd3, 0x24, 0x78, 0x14, 0x18, 0x35, 0x78, 0x82, 0xe0,
	0x7c, 0xa5, 0x49, 0x8c, 0x5c, 0x42, 0xc8, 0x56, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09,
	0x71, 0xb1, 0x24, 0xe7, 0xa7, 0xa4, 0x82, 0x2d, 0xe6, 0x0c, 0x02, 0xb3, 0x41, 0x62, 0x29, 0xa9,
	0xc5, 0xc9, 0x12, 0x4c, 0x10, 0x31, 0x10, 0x5b, 0x48, 0x8c, 0x8b, 0x2d, 0x39, 0x3f, 0x2f, 0xcf,
	0x33, 0x45, 0x82, 0x59, 0x81, 0x51, 0x83, 0x25, 0x08, 0xca, 0xa3, 0xcc, 0x51, 0x46, 0xfe, 0x5c,
	0x7c, 0x6e, 0x28, 0x21, 0x27, 0x64, 0xcb, 0xc5, 0x85, 0x70, 0xa5, 0x90, 0x28, 0x28, 0x20, 0x30,
	0x02, 0x4c, 0x4a, 0x0c, 0x5d, 0x18, 0xe2, 0x19, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xd1, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x42, 0xbe, 0x66, 0x91, 0x01, 0x00, 0x00,
}
