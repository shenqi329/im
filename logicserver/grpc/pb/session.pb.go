// Code generated by protoc-gen-go.
// source: session.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateSessionRequest struct {
	Rid     uint64   `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	RpcInfo *RpcInfo `protobuf:"bytes,2,opt,name=rpcInfo" json:"rpcInfo,omitempty"`
	UserIds []string `protobuf:"bytes,11,rep,name=UserIds,json=userIds" json:"UserIds,omitempty"`
}

func (m *CreateSessionRequest) Reset()                    { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()               {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *CreateSessionRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateSessionRequest) GetRpcInfo() *RpcInfo {
	if m != nil {
		return m.RpcInfo
	}
	return nil
}

func (m *CreateSessionRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type CreateSessionResponse struct {
	Rid       uint64 `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	Code      string `protobuf:"bytes,2,opt,name=Code,json=code" json:"Code,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=Desc,json=desc" json:"Desc,omitempty"`
	SessionId uint64 `protobuf:"varint,11,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
}

func (m *CreateSessionResponse) Reset()                    { *m = CreateSessionResponse{} }
func (m *CreateSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionResponse) ProtoMessage()               {}
func (*CreateSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *CreateSessionResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateSessionResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CreateSessionResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CreateSessionResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type DeleteSessionUsersRequest struct {
	Rid           uint64   `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	RpcInfo       *RpcInfo `protobuf:"bytes,2,opt,name=rpcInfo" json:"rpcInfo,omitempty"`
	SessionId     uint64   `protobuf:"varint,11,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	DeleteUserIds []string `protobuf:"bytes,12,rep,name=DeleteUserIds,json=deleteUserIds" json:"DeleteUserIds,omitempty"`
}

func (m *DeleteSessionUsersRequest) Reset()                    { *m = DeleteSessionUsersRequest{} }
func (m *DeleteSessionUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionUsersRequest) ProtoMessage()               {}
func (*DeleteSessionUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *DeleteSessionUsersRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *DeleteSessionUsersRequest) GetRpcInfo() *RpcInfo {
	if m != nil {
		return m.RpcInfo
	}
	return nil
}

func (m *DeleteSessionUsersRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *DeleteSessionUsersRequest) GetDeleteUserIds() []string {
	if m != nil {
		return m.DeleteUserIds
	}
	return nil
}

type AddSessionUsersRequest struct {
	Rid        uint64   `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	RpcInfo    *RpcInfo `protobuf:"bytes,2,opt,name=rpcInfo" json:"rpcInfo,omitempty"`
	SessionId  uint64   `protobuf:"varint,11,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	AddUserIds []string `protobuf:"bytes,12,rep,name=AddUserIds,json=addUserIds" json:"AddUserIds,omitempty"`
}

func (m *AddSessionUsersRequest) Reset()                    { *m = AddSessionUsersRequest{} }
func (m *AddSessionUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSessionUsersRequest) ProtoMessage()               {}
func (*AddSessionUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *AddSessionUsersRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *AddSessionUsersRequest) GetRpcInfo() *RpcInfo {
	if m != nil {
		return m.RpcInfo
	}
	return nil
}

func (m *AddSessionUsersRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *AddSessionUsersRequest) GetAddUserIds() []string {
	if m != nil {
		return m.AddUserIds
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateSessionRequest)(nil), "pb.CreateSessionRequest")
	proto.RegisterType((*CreateSessionResponse)(nil), "pb.CreateSessionResponse")
	proto.RegisterType((*DeleteSessionUsersRequest)(nil), "pb.DeleteSessionUsersRequest")
	proto.RegisterType((*AddSessionUsersRequest)(nil), "pb.AddSessionUsersRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	// 创建会话
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	DeleteUsers(ctx context.Context, in *DeleteSessionUsersRequest, opts ...grpc.CallOption) (*Response, error)
	AddUsers(ctx context.Context, in *AddSessionUsersRequest, opts ...grpc.CallOption) (*Response, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := grpc.Invoke(ctx, "/pb.Session/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) DeleteUsers(ctx context.Context, in *DeleteSessionUsersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pb.Session/DeleteUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) AddUsers(ctx context.Context, in *AddSessionUsersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pb.Session/AddUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	// 创建会话
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	DeleteUsers(context.Context, *DeleteSessionUsersRequest) (*Response, error)
	AddUsers(context.Context, *AddSessionUsersRequest) (*Response, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Session/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Session/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).DeleteUsers(ctx, req.(*DeleteSessionUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSessionUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Session/AddUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).AddUsers(ctx, req.(*AddSessionUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Session_CreateSession_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _Session_DeleteUsers_Handler,
		},
		{
			MethodName: "AddUsers",
			Handler:    _Session_AddUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0xfd, 0xa5, 0x29, 0xbf, 0x98, 0x49, 0x23, 0x32, 0xa8, 0x6c, 0x83, 0x4a, 0x09, 0x0a, 0x3d,
	0xf5, 0x50, 0xc1, 0x93, 0x97, 0xd2, 0x22, 0xf4, 0xba, 0xe2, 0x07, 0x68, 0x33, 0x23, 0x04, 0xa4,
	0xbb, 0xee, 0xb4, 0x9f, 0xc3, 0xab, 0xdf, 0xc8, 0xaf, 0x25, 0xc9, 0xf6, 0x8f, 0x2d, 0xd1, 0x8b,
	0xe0, 0x6d, 0xf7, 0xcd, 0xbe, 0x7d, 0x6f, 0xde, 0x0c, 0xa4, 0xc2, 0x22, 0xa5, 0x59, 0x0c, 0xac,
	0x33, 0x4b, 0x83, 0x2d, 0x3b, 0xcf, 0x8e, 0x1d, 0x8b, 0x35, 0x0b, 0x61, 0x8f, 0x65, 0xb1, 0xb3,
	0x85, 0x3f, 0xe6, 0x25, 0x9c, 0x8e, 0x1d, 0xcf, 0x96, 0xfc, 0xe8, 0x59, 0x9a, 0x5f, 0x57, 0x2c,
	0x4b, 0x3c, 0x81, 0x50, 0x97, 0xa4, 0x82, 0x5e, 0xd0, 0x6f, 0xeb, 0xd0, 0x95, 0x84, 0x37, 0x10,
	0x39, 0x5b, 0x4c, 0x17, 0xcf, 0x46, 0xb5, 0x7a, 0x41, 0x3f, 0x19, 0x26, 0x03, 0x3b, 0x1f, 0x68,
	0x0f, 0xe9, 0x4d, 0x0d, 0x15, 0x44, 0x4f, 0xc2, 0x6e, 0x4a, 0xa2, 0x92, 0x5e, 0xd8, 0x8f, 0x75,
	0xb4, 0xf2, 0xd7, 0xdc, 0xc0, 0xd9, 0x81, 0x94, 0x37, 0xd5, 0xa0, 0x85, 0xd0, 0x1e, 0x1b, 0xe2,
	0x5a, 0x28, 0xd6, 0xed, 0xc2, 0x10, 0x57, 0xd8, 0x84, 0xa5, 0x50, 0xa1, 0xc7, 0x88, 0xa5, 0xc0,
	0x0b, 0x88, 0xd7, 0x9f, 0x4d, 0x49, 0x25, 0x35, 0x3f, 0x96, 0x0d, 0x90, 0xbf, 0x07, 0xd0, 0x9d,
	0xf0, 0x0b, 0x6f, 0x15, 0x2b, 0x63, 0xf2, 0xeb, 0x0e, 0x7f, 0x14, 0xc5, 0x6b, 0x48, 0xbd, 0xe6,
	0x26, 0x85, 0x4e, 0x9d, 0x42, 0x4a, 0x5f, 0xc1, 0xfc, 0x2d, 0x80, 0xf3, 0x11, 0xd1, 0x1f, 0xfa,
	0xba, 0x02, 0x18, 0x11, 0xed, 0x9b, 0x82, 0xd9, 0x16, 0x19, 0x7e, 0x04, 0x10, 0xad, 0xe9, 0xf8,
	0x00, 0xe9, 0xde, 0xa4, 0x50, 0x55, 0x82, 0x4d, 0x7b, 0x92, 0x75, 0x1b, 0x2a, 0x7e, 0xac, 0xf9,
	0x3f, 0xbc, 0x87, 0x64, 0x97, 0x85, 0xe0, 0x65, 0xf5, 0xf6, 0xdb, 0x81, 0x64, 0x9d, 0xba, 0xab,
	0x1d, 0xfb, 0x0e, 0x8e, 0xd6, 0x8e, 0x05, 0xb3, 0xaa, 0xd6, 0x1c, 0xd8, 0x21, 0x6f, 0xfe, 0xbf,
	0xde, 0xec, 0xdb, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x44, 0x27, 0xdc, 0x09, 0x03, 0x00,
	0x00,
}
