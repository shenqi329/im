// Code generated by protoc-gen-go.
// source: registe.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeviceRegisteRequest struct {
	Rid      uint64 `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	SsoToken string `protobuf:"bytes,11,opt,name=SsoToken,json=ssoToken" json:"SsoToken,omitempty"`
	AppId    string `protobuf:"bytes,12,opt,name=AppId,json=appId" json:"AppId,omitempty"`
	DeviceId string `protobuf:"bytes,13,opt,name=DeviceId,json=deviceId" json:"DeviceId,omitempty"`
	Platform string `protobuf:"bytes,14,opt,name=Platform,json=platform" json:"Platform,omitempty"`
}

func (m *DeviceRegisteRequest) Reset()                    { *m = DeviceRegisteRequest{} }
func (m *DeviceRegisteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceRegisteRequest) ProtoMessage()               {}
func (*DeviceRegisteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DeviceRegisteRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *DeviceRegisteRequest) GetSsoToken() string {
	if m != nil {
		return m.SsoToken
	}
	return ""
}

func (m *DeviceRegisteRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeviceRegisteRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceRegisteRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type DeviceRegisteResponse struct {
	Rid   uint64 `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=Code,json=code" json:"Code,omitempty"`
	Desc  string `protobuf:"bytes,3,opt,name=Desc,json=desc" json:"Desc,omitempty"`
	Token string `protobuf:"bytes,11,opt,name=Token,json=token" json:"Token,omitempty"`
}

func (m *DeviceRegisteResponse) Reset()                    { *m = DeviceRegisteResponse{} }
func (m *DeviceRegisteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceRegisteResponse) ProtoMessage()               {}
func (*DeviceRegisteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *DeviceRegisteResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *DeviceRegisteResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *DeviceRegisteResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DeviceRegisteResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceRegisteRequest)(nil), "pb.DeviceRegisteRequest")
	proto.RegisterType((*DeviceRegisteResponse)(nil), "pb.DeviceRegisteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registe service

type RegisteClient interface {
	// Sends a greeting
	Registe(ctx context.Context, in *DeviceRegisteRequest, opts ...grpc.CallOption) (*DeviceRegisteResponse, error)
}

type registeClient struct {
	cc *grpc.ClientConn
}

func NewRegisteClient(cc *grpc.ClientConn) RegisteClient {
	return &registeClient{cc}
}

func (c *registeClient) Registe(ctx context.Context, in *DeviceRegisteRequest, opts ...grpc.CallOption) (*DeviceRegisteResponse, error) {
	out := new(DeviceRegisteResponse)
	err := grpc.Invoke(ctx, "/pb.Registe/Registe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registe service

type RegisteServer interface {
	// Sends a greeting
	Registe(context.Context, *DeviceRegisteRequest) (*DeviceRegisteResponse, error)
}

func RegisterRegisteServer(s *grpc.Server, srv RegisteServer) {
	s.RegisterService(&_Registe_serviceDesc, srv)
}

func _Registe_Registe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegisteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteServer).Registe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Registe/Registe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteServer).Registe(ctx, req.(*DeviceRegisteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Registe",
	HandlerType: (*RegisteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registe",
			Handler:    _Registe_Registe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registe.proto",
}

func init() { proto.RegisterFile("registe.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x4d, 0x93, 0x68, 0x1d, 0xad, 0xc8, 0x52, 0x61, 0xec, 0xa9, 0xe4, 0xd4, 0x53, 0x0e,
	0xfa, 0x02, 0x8a, 0xbd, 0x14, 0x2f, 0xb2, 0xfa, 0x02, 0x4d, 0x66, 0x2c, 0x41, 0xed, 0xac, 0x99,
	0xd5, 0x07, 0xf1, 0x89, 0x65, 0xb3, 0x0b, 0x4a, 0xc9, 0x6d, 0xff, 0xf9, 0x98, 0xd9, 0x8f, 0x1f,
	0x66, 0x3d, 0xef, 0x3a, 0xf5, 0x5c, 0xbb, 0x5e, 0xbc, 0x98, 0x89, 0x6b, 0xaa, 0x9f, 0x0c, 0xe6,
	0x6b, 0xfe, 0xee, 0x5a, 0xb6, 0x91, 0x59, 0xfe, 0xfc, 0x62, 0xf5, 0xe6, 0x12, 0x72, 0xdb, 0x11,
	0x66, 0xcb, 0x6c, 0x55, 0xd8, 0xbc, 0xef, 0xc8, 0x2c, 0x60, 0xfa, 0xac, 0xf2, 0x22, 0x6f, 0xbc,
	0xc7, 0xb3, 0x65, 0xb6, 0x3a, 0xb5, 0x53, 0x4d, 0xd9, 0xcc, 0xa1, 0xbc, 0x77, 0x6e, 0x43, 0x78,
	0x3e, 0x80, 0x72, 0x1b, 0x42, 0xd8, 0x88, 0xb7, 0x37, 0x84, 0xb3, 0xb8, 0x41, 0x29, 0x07, 0xf6,
	0xf4, 0xbe, 0xf5, 0xaf, 0xd2, 0x7f, 0xe0, 0x45, 0x64, 0x2e, 0xe5, 0x6a, 0x07, 0x57, 0x07, 0x4e,
	0xea, 0x64, 0xaf, 0x3c, 0x22, 0x65, 0xa0, 0x78, 0x10, 0x62, 0x9c, 0x0c, 0x27, 0x8a, 0x56, 0x88,
	0xc3, 0x6c, 0xcd, 0xda, 0x62, 0x1e, 0x67, 0xc4, 0xda, 0x06, 0xc1, 0xff, 0xe6, 0xa5, 0x0f, 0xe1,
	0xe6, 0x11, 0x4e, 0xd2, 0x17, 0xe6, 0xee, 0xef, 0x89, 0xb5, 0x6b, 0xea, 0xb1, 0x52, 0x16, 0xd7,
	0x23, 0x24, 0xaa, 0x55, 0x47, 0xcd, 0xf1, 0xd0, 0xea, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x35, 0xf9, 0x6d, 0x49, 0x66, 0x01, 0x00, 0x00,
}
